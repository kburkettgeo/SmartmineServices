{
  "author": "",
  "name": "easy-pbkdf2",
  "version": "0.0.2",
  "description": "Easily generate securily salted PBKDF2 hashes for password storage",
  "keywords": [
    "pbkdf2",
    "passwords"
  ],
  "main": "easy-pbkdf2.js",
  "homepage": "https://github.com/davidmurdoch/easy-pbkdf2",
  "bugs": {
    "url": "https://github.com/davidmurdoch/easy-pbkdf2/issues"
  },
  "dependencies": {
    "lodash": "0.9.2"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/davidmurdoch/easy-pbkdf2.git"
  },
  "readme": "# Easy PBKDF2 for node.js\n\nEasy PBKDF2 makes it easier to create secure, individually salted, password hashes using PBKDF2.\n\nThis implementation is based on StackExchange's own Open Sourced PBKDF2 methods.\n\n## Installation:\n\nvia cmd line:\n\n```bash\n$ npm install easy-pbkdf2\n```\n\nor in your `package.json`:\n\n```json\n\"dependencies\": {\n    \"easy-pbkdf2\": \"0.0.2\"\n}\n```\n\n## Usage:\n```js\nvar easyPbkdf2 = require(\"easy-pbkdf2\")();\nvar salt = easyPbkdf2.generateSalt();\nvar password = \"RandomDigits\";\neasyPbkdf2.secureHash( password, salt, function( err, passwordHash, originalSalt ) {\n    // use your own db's methods to save the hashed password AND salt.\n    currentUser.update({\n        // The Base64 encoded hash, 344 characters long\n        \"password_hash\": passwordHash,\n        // Salt length varies based on SALT_SIZE. The default SALT_SIZE of\n        // 32 produces a value that is:\n        // (SALT_SIZE.toString(16).length) + 1 + base64EncodedSalt.length)\n        // characters long (42 characters).\n        \"salt\": originalSalt // === salt\n    });\n});\n\n// ...\n\n// sometime later:\nfunction authenticate( user, userEnteredPassword, callback ){\n    easyPbkdf2.secureHash( userEnteredPassword, user.salt, function( err, passwordHash, salt ) {\n        // make sure the user-entered password is equal to the previously\n        // created hash when hashed with the same salt.\n        callback( passwordHash === user.password_hash );\n    });\n}\n```\n\nYou can also have easyPbkdf2 generate the salt for you by omitting the `salt` parameter:\n\n```js\neasyPbkdf2.secureHash( password, function( err, passwordHash, newSalt ) {\n    // save newSalt somewhere!\n});\n```\n\nTo create a new instance of `EasyPbkdf2`: \n\n```js\n    var easyPbkdf2 = require(\"easy-pbkdf2\")();\n```\n\nYou can also use the following methods of instantiation:\n\n```js\n// the EasyPbkdf2 constructor\nvar EasyPbkdf2 = require(\"easy-pbkdf2\"),\n    easyPbkdf2;\n\neasyPbkdf2 = EasyPbkdf2(options);\neasyPbkdf2 = new EasyPbkdf2(options);\neasyPbkdf2 = EasyPbkdf2.EasyPbkdf2(options);\neasyPbkdf2 = new EasyPbkdf2.EasyPbkdf2(options);\n```\n\nof which all will return an `EasyPbkdf2` instance with `options` set.\n\n## Options\n\n```js\n var options = {\n    // default DEFAULT_HASH_ITERATIONS is 512\n    \"DEFAULT_HASH_ITERATIONS\": 256,\n    // default SALT_SIZE is 32\n    \"SALT_SIZE\": 16\n};\n\nvar easyPbkdf2 = new EasyPbkdf2(options);\nconsole.log(easyPbkdf2.DEFAULT_HASH_ITERATIONS) // 256\nconsole.log(easyPbkdf2.SALT_SIZE); // 16\n\n// options are applied to each instance individually.\nconsole.log( (new EasyPbkdf2()).DEFAULT_HASH_ITERATIONS ); // 512\n```\n\n## Methods\n\n###`weakHash( value )`\n\n> Cranks out a collision resistant hash, relatively quickly.  \n> Not suitable for passwords, or sensitive information.  \n*Synchronous only*  \n\n#### Params:\n - **value**: String or Object. Base64 encoded sha1 hash of `value`\n\n#### Returns:\n - A string; Base64 encoded sha1 hash of `value`\n\n---\n\n###`random( bytes, callback )`\n\n> Universal random provider. Generates cryptographically strong pseudo-random data.  \n*Syncronous or Asyncronous*\n\n#### Params:\n  - **bytes**: Number. The number of bytes to return.\n  - **callback**: Function. The callback to call for async operation (optional)\n\n#### Returns:\n - A SlowBuffer; A buffer containing therandom bytes. (optional)\n\n---\n\n###`generateSalt( explicitIterations, callback )`\n\n> Convenience wrapper around .random to grab a new salt value.  \n> Treat this value as opaque, as it captures iterations.  \n*Synchronous or Asynchronous*\n\n#### Params:\n - **explicitIterations**: Number. An integer (optional)\n - **callback**: Function. (optional)\n\n#### Returns:\n - A String. Return iterations and salt together as one string ({hex-iterations}.{base64-salt}) (optional)\n\n---\n\n###`secureHash( value, salt, callback )`\n\n> Alias for [`hash`](#hash-value-salt-callback-).\n\n---\n\n###`hash( value, salt, callback )`\n\n> Backs Secure hashes.  \n> Uses PBKDF2 internally, as implemented by the node's native crypto library.  \n> See http://en.wikipedia.org/wiki/PBKDF2  \n> and http://code.google.com/p/crypto-js/ for more information.  \n*Asynchronous only*\n\n#### Params:\n - **value**: String. The value/password you want to hash.\n - **salt**: String. salt (should include iterations). Automatically created if omitted. (optional)\n - **callback**: Function. fn( {Error} err, {String} A secure hash (base64 encoded), {String} the original or newly created salt ).\n\n## Issues\n\nPlease file them here: [https://github.com/davidmurdoch/easy-pbkdf2/issues](https://github.com/davidmurdoch/easy-pbkdf2/issues).\n\nAnd remember: pull requests are very welcome. :-)\n",
  "readmeFilename": "README.md",
  "_id": "easy-pbkdf2@0.0.2",
  "_from": "easy-pbkdf2@*"
}
